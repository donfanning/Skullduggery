package edu.uc.skullduggery;

import java.security.InvalidKeyException;
import java.security.NoSuchAlgorithmException;

import java.io.Serializable;
import java.math.BigInteger;

import javax.crypto.KeyGenerator;
import javax.crypto.Mac;
import javax.crypto.SecretKey;
import javax.crypto.spec.SecretKeySpec;

public class SkullUserInfo implements Serializable {
	/**
	 * Serial version generated by Java. Change if you want, I think. 
	 */
	private static final long serialVersionUID = 5505391523869325110L;
	
	private SecretKey _salt;
	private byte[] _pubKeyHash;
	private String _number;
	private int _userId;
	
	public int getUserId()
	{
		return _userId;
	}
	
	public void setUserId(int userId)
	{
		_userId = userId;
	}
	
	public byte[] getSalt()
	{
		return _salt.getEncoded();
	}
	
	public byte[] getHash()
	{
		return _pubKeyHash;
	}
		
	public String getNumber()
	{
		return _number;
	}

	public SkullUserInfo(String number, int id, byte[] salt, byte[] pubKeyHash)
	{
		_userId = id;
		_salt = new SecretKeySpec(salt, Constants.HASHALGORITHM);
		_pubKeyHash = pubKeyHash;
		_number = number;
	}
	
	public SkullUserInfo(String number) throws NoSuchAlgorithmException
	{
		KeyGenerator keygen = KeyGenerator.getInstance(Constants.HASHALGORITHM);
		_userId = 0;
		_salt = keygen.generateKey();
		_number = number;
	}
	
	/*
	 * This will match the given raw public key with the hashed value stored by this user.
	 */
	public boolean matchStoredPubKey(BigInteger pubKeyExp) throws InvalidKeyException
	{
		Mac mac;
		try{
			mac = Mac.getInstance(Constants.HASHALGORITHM);
		}catch (NoSuchAlgorithmException nsae){
			throw new Error(nsae);
		}
		mac.init(_salt);
		byte[] pkHash = mac.doFinal(pubKeyExp.toByteArray());
		
		return java.util.Arrays.equals(pkHash, _pubKeyHash);
	}
	
	public void storePubKey(BigInteger pubKeyExp) throws InvalidKeyException
	{
		Mac mac;
		try{
			mac = Mac.getInstance(Constants.HASHALGORITHM);
		}catch (NoSuchAlgorithmException nsae){
			throw new Error(nsae);
		}
		mac.init(_salt);
		_pubKeyHash = mac.doFinal(pubKeyExp.toByteArray());
	}
}
